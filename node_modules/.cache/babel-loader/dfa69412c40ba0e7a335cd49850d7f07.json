{"ast":null,"code":"var _jsxFileName = \"/home/radhetians/Desktop/frontend/src/components/AnswerQuestionScreen.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { saveAnswer } from '../actions/questionActions';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport Spinner from \"./Spinner\";\nimport { Redirect } from 'react-router';\n\nfunction AnswerQuestionScreen(props) {\n  const question = props.location.state;\n  const ques = useSelector(state => state.questionSave);\n  const {\n    quon,\n    error,\n    loading,\n    success\n  } = ques;\n  const [answer, setAnswer] = useState('');\n  const userSignin = useSelector(state => state.userSignin);\n  const {\n    userInfo\n  } = userSignin;\n  const dispatch = useDispatch();\n  const redirect = props.location.search ? props.location.search.split(\"=\")[1] : '/';\n  useEffect(() => {\n    if (!userInfo) {\n      props.history.push(redirect);\n    } else {//userInfo\n    }\n\n    return () => {//\n    };\n  }, [userInfo]);\n\n  const submitHandler = e => {\n    e.preventDefault(); // questionId, userId, userName, answer\n\n    dispatch(saveAnswer(question._id, userInfo._id, userInfo.userName, userInfo.gender, answer)); // props.history.push('/');\n  };\n\n  if (success) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, loading ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }\n  }) : /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    className: \"ask-question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, question.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"small\", {\n    className: \"form-text text-muted question-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 41\n    }\n  }, \"Answer to the Question*\"), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"question-hint\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 127\n    }\n  }, \"Include all the information someone would need to understand your answer\"), /*#__PURE__*/React.createElement(CKEditor, {\n    editor: ClassicEditor,\n    data: answer,\n    onChange: (event, editor) => setAnswer(editor.getData()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, error && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 27\n    }\n  }, error)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"Save\"))));\n}\n\nexport default AnswerQuestionScreen;","map":{"version":3,"sources":["/home/radhetians/Desktop/frontend/src/components/AnswerQuestionScreen.jsx"],"names":["React","useEffect","useState","useSelector","useDispatch","saveAnswer","CKEditor","ClassicEditor","Spinner","Redirect","AnswerQuestionScreen","props","question","location","state","ques","questionSave","quon","error","loading","success","answer","setAnswer","userSignin","userInfo","dispatch","redirect","search","split","history","push","submitHandler","e","preventDefault","_id","userName","gender","title","event","editor","getData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { saveAnswer} from '../actions/questionActions';\n\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\nimport Spinner from \"./Spinner\";\nimport { Redirect } from 'react-router';\n\nfunction AnswerQuestionScreen(props) {\n    const question = props.location.state;\n    const ques = useSelector((state) => state.questionSave);\n    const { quon, error,loading, success } = ques;\n    const [answer, setAnswer] = useState('');\n    const userSignin = useSelector((state) => state.userSignin);\n    const { userInfo } = userSignin;\n    const dispatch = useDispatch();\n\n    const redirect = props.location.search ? props.location.search.split(\"=\")[1] : '/';\n    useEffect(() => {\n        \n        if (!userInfo) {\n        props.history.push(redirect);\n        } else {\n        //userInfo\n        }\n        return () => {\n        //\n        };\n    }, [userInfo]);\n    \n    const submitHandler = (e) => {\n        e.preventDefault();\n        // questionId, userId, userName, answer\n        dispatch(saveAnswer(question._id, userInfo._id, userInfo.userName, userInfo.gender, answer));\n        // props.history.push('/');\n\n    }\n\n    if (success) {\n        return <Redirect to=\"/\" />\n    }\n  \n\n    return (\n    <>\n    {loading ? <Spinner/>: \n        <form  onSubmit={submitHandler} className=\"ask-question\">\n            \n            <h1>{question.title}</h1>\n            <div className=\"form-group\"><small className=\"form-text text-muted question-label\">Answer to the Question*</small><label className=\"question-hint\">Include all the information someone would need to understand your answer</label>\n                <CKEditor editor={ClassicEditor} data={answer} onChange={( event, editor ) => setAnswer(editor.getData())} />\n            </div>\n            <div className=\"form-group\">\n                \n                {error && <div>{error}</div>}\n            </div>\n            <div className=\"form-group\">\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">Save</button>\n            </div>\n        </form>\n    }\n    </>\n            \n    );\n\n}\n\nexport default AnswerQuestionScreen;"]},"metadata":{},"sourceType":"module"}