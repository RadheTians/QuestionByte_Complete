{"ast":null,"code":"import { QUESTION_LIST_REQUEST, QUESTION_LIST_SUCCESS, QUESTION_LIST_FAIL, QUESTION_DETAILS_REQUEST, QUESTION_DETAILS_SUCCESS, QUESTION_DETAILS_FAIL, QUESTION_SAVE_REQUEST, QUESTION_SAVE_SUCCESS, QUESTION_SAVE_FAIL, QUESTION_DELETE_SUCCESS, QUESTION_DELETE_FAIL, QUESTION_DELETE_REQUEST, QUESTION_REVIEW_SAVE_REQUEST, QUESTION_REVIEW_SAVE_FAIL, QUESTION_REVIEW_SAVE_SUCCESS } from '../constants/questionConstants';\nimport axios from 'axios';\nimport Axios from 'axios';\n\nconst listQuestions = () => async dispatch => {\n  try {\n    dispatch({\n      type: QUESTION_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/users/allquestions');\n    dispatch({\n      type: QUESTION_LIST_SUCCESS,\n      payload: data.data\n    });\n  } catch (error) {\n    dispatch({\n      type: QUESTION_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = question => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: QUESTION_SAVE_REQUEST,\n      payload: question\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!question._id) {\n      const {\n        data\n      } = await Axios.post('/api/products', question, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: QUESTION_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/products/' + question._id, question, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: QUESTION_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: QUESTION_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: QUESTION_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get('/api/products/' + productId);\n    dispatch({\n      type: QUESTION_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: QUESTION_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteProdcut = productId => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    dispatch({\n      type: QUESTION_DELETE_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.delete('/api/products/' + productId, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: QUESTION_DELETE_SUCCESS,\n      payload: data,\n      success: true\n    });\n  } catch (error) {\n    dispatch({\n      type: QUESTION_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProductReview = (productId, review) => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo: {\n          token\n        }\n      }\n    } = getState();\n    dispatch({\n      type: QUESTION_REVIEW_SAVE_REQUEST,\n      payload: review\n    });\n    const {\n      data\n    } = await axios.post(`/api/products/${productId}/reviews`, review, {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    dispatch({\n      type: QUESTION_REVIEW_SAVE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    // report error\n    dispatch({\n      type: QUESTION_REVIEW_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listQuestions, detailsProduct, saveProduct, deleteProdcut, saveProductReview };","map":{"version":3,"sources":["/home/radhetians/QuestionByte/frontend/src/actions/questionActions.js"],"names":["QUESTION_LIST_REQUEST","QUESTION_LIST_SUCCESS","QUESTION_LIST_FAIL","QUESTION_DETAILS_REQUEST","QUESTION_DETAILS_SUCCESS","QUESTION_DETAILS_FAIL","QUESTION_SAVE_REQUEST","QUESTION_SAVE_SUCCESS","QUESTION_SAVE_FAIL","QUESTION_DELETE_SUCCESS","QUESTION_DELETE_FAIL","QUESTION_DELETE_REQUEST","QUESTION_REVIEW_SAVE_REQUEST","QUESTION_REVIEW_SAVE_FAIL","QUESTION_REVIEW_SAVE_SUCCESS","axios","Axios","listQuestions","dispatch","type","data","get","payload","error","message","saveProduct","question","getState","userSignin","userInfo","_id","post","headers","Authorization","token","put","detailsProduct","productId","deleteProdcut","delete","success","saveProductReview","review"],"mappings":"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","sourcesContent":["import {\n    QUESTION_LIST_REQUEST,\n    QUESTION_LIST_SUCCESS,\n    QUESTION_LIST_FAIL,\n    QUESTION_DETAILS_REQUEST,\n    QUESTION_DETAILS_SUCCESS,\n    QUESTION_DETAILS_FAIL,\n    QUESTION_SAVE_REQUEST,\n    QUESTION_SAVE_SUCCESS,\n    QUESTION_SAVE_FAIL,\n    QUESTION_DELETE_SUCCESS,\n    QUESTION_DELETE_FAIL,\n    QUESTION_DELETE_REQUEST,\n    QUESTION_REVIEW_SAVE_REQUEST,\n    QUESTION_REVIEW_SAVE_FAIL,\n    QUESTION_REVIEW_SAVE_SUCCESS,\n  } from '../constants/questionConstants';\n  import axios from 'axios';\n  import Axios from 'axios';\n  \n  const listQuestions = () => async (dispatch) => {\n    try {\n      dispatch({ type: QUESTION_LIST_REQUEST });\n      const { data } = await axios.get('/api/users/allquestions');\n      dispatch({ type: QUESTION_LIST_SUCCESS, payload: data.data });\n    } catch (error) {\n      dispatch({ type: QUESTION_LIST_FAIL, payload: error.message });\n    }\n  };\n  \n  const saveProduct = (question) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: QUESTION_SAVE_REQUEST, payload: question });\n      const {\n        userSignin: { userInfo },\n      } = getState();\n      if (!question._id) {\n        const { data } = await Axios.post('/api/products', question, {\n          headers: {\n            Authorization: 'Bearer ' + userInfo.token,\n          },\n        });\n        dispatch({ type: QUESTION_SAVE_SUCCESS, payload: data });\n      } else {\n        const { data } = await Axios.put(\n          '/api/products/' + question._id,\n          question,\n          {\n            headers: {\n              Authorization: 'Bearer ' + userInfo.token,\n            },\n          }\n        );\n        dispatch({ type: QUESTION_SAVE_SUCCESS, payload: data });\n      }\n    } catch (error) {\n      dispatch({ type: QUESTION_SAVE_FAIL, payload: error.message });\n    }\n  };\n  \n  const detailsProduct = (productId) => async (dispatch) => {\n    try {\n      dispatch({ type: QUESTION_DETAILS_REQUEST, payload: productId });\n      const { data } = await axios.get('/api/products/' + productId);\n      dispatch({ type: QUESTION_DETAILS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: QUESTION_DETAILS_FAIL, payload: error.message });\n    }\n  };\n  \n  const deleteProdcut = (productId) => async (dispatch, getState) => {\n    try {\n      const {\n        userSignin: { userInfo },\n      } = getState();\n      dispatch({ type: QUESTION_DELETE_REQUEST, payload: productId });\n      const { data } = await axios.delete('/api/products/' + productId, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token,\n        },\n      });\n      dispatch({ type: QUESTION_DELETE_SUCCESS, payload: data, success: true });\n    } catch (error) {\n      dispatch({ type: QUESTION_DELETE_FAIL, payload: error.message });\n    }\n  };\n  \n  const saveProductReview = (productId, review) => async (dispatch, getState) => {\n    try {\n      const {\n        userSignin: {\n          userInfo: { token },\n        },\n      } = getState();\n      dispatch({ type: QUESTION_REVIEW_SAVE_REQUEST, payload: review });\n      const { data } = await axios.post(\n        `/api/products/${productId}/reviews`,\n        review,\n        {\n          headers: {\n            Authorization: 'Bearer ' + token,\n          },\n        }\n      );\n      dispatch({ type: QUESTION_REVIEW_SAVE_SUCCESS, payload: data });\n    } catch (error) {\n      // report error\n      dispatch({ type: QUESTION_REVIEW_SAVE_FAIL, payload: error.message });\n    }\n  };\n  \n  export {\n    listQuestions,\n    detailsProduct,\n    saveProduct,\n    deleteProdcut,\n    saveProductReview,\n  };"]},"metadata":{},"sourceType":"module"}