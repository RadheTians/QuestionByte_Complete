{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGOUT, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from \"../constants/userConstants\";\nvar axiosConfig = {\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8',\n    \"Access-Control-Allow-Origin\": \"*\"\n  }\n};\n\nconst update = ({\n  userId,\n  name,\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/users/\" + userId, {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst signin = (email, password) => async dispatch => {\n  axios.post(\"api/users/login\", {\n    email,\n    password\n  }).then(res => {\n    console.log(res);\n    console.log(res.data);\n  }); // dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\n  // try {\n  //     const { data } = await Axios.post(\"/api/users/login\",{email,password},axiosConfig);\n  //     dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n  //     Cookie.set('userInfo', JSON.stringify(data));\n  // } catch (error) {\n  //     dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\n  // }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { signin, register, logout, update };","map":{"version":3,"sources":["/home/radhetians/QuestionByte/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGOUT","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","axiosConfig","headers","update","userId","name","email","password","dispatch","getState","userSignin","userInfo","type","payload","data","put","Authorization","token","set","JSON","stringify","error","message","signin","axios","post","then","res","console","log","register","logout","remove"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,gBAHJ,EAIIC,qBAJJ,EAKIC,qBALJ,EAMIC,kBANJ,EAOIC,WAPJ,EAQIC,mBARJ,EASIC,mBATJ,EAUIC,gBAVJ,QAWO,4BAXP;AAaA,IAAIC,WAAW,GAAG;AACdC,EAAAA,OAAO,EAAE;AACL,oBAAgB,gCADX;AAEL,mCAA+B;AAF1B;AADK,CAAlB;;AAOA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA,KAAhB;AAAuBC,EAAAA;AAAvB,CAAD,KAAuC,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AAC/E,QAAM;AAAEC,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AAAd,MAA+BF,QAAQ,EAA7C;AACAD,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEd,mBAAR;AAA6Be,IAAAA,OAAO,EAAE;AAAET,MAAAA,MAAF;AAAUC,MAAAA,IAAV;AAAgBC,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB;AAAtC,GAAD,CAAR;;AACA,MAAI;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMzB,KAAK,CAAC0B,GAAN,CAAU,gBAAgBX,MAA1B,EAAkC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAlC,EAA6D;AAChFL,MAAAA,OAAO,EAAE;AACLc,QAAAA,aAAa,EAAE,YAAYL,QAAQ,CAACM;AAD/B;AADuE,KAA7D,CAAvB;AAKAT,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEb,mBAAR;AAA6Bc,MAAAA,OAAO,EAAEC;AAAtC,KAAD,CAAR;AACAxB,IAAAA,MAAM,CAAC4B,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAvB;AACH,GARD,CAQE,OAAOO,KAAP,EAAc;AACZb,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEZ,gBAAR;AAA0Ba,MAAAA,OAAO,EAAEQ,KAAK,CAACC;AAAzC,KAAD,CAAR;AACH;AACJ,CAdD;;AAgBA,MAAMC,MAAM,GAAG,CAACjB,KAAD,EAAQC,QAAR,KAAqB,MAAMC,QAAN,IAAmB;AAEnDgB,EAAAA,KAAK,CAACC,IAAN,CAAW,iBAAX,EAA8B;AAAEnB,IAAAA,KAAF;AAAQC,IAAAA;AAAR,GAA9B,EACGmB,IADH,CACQC,GAAG,IAAI;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACb,IAAhB;AACD,GAJH,EAFmD,CAOnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAfD;;AAiBA,MAAMgB,QAAQ,GAAG,CAACzB,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B,MAAMC,QAAN,IAAmB;AAC3DA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAElB,qBAAR;AAA+BmB,IAAAA,OAAO,EAAE;AAAER,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf;AAAxC,GAAD,CAAR;;AACA,MAAI;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMzB,KAAK,CAACoC,IAAN,CAAW,qBAAX,EAAkC;AAAEpB,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAlC,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEjB,qBAAR;AAA+BkB,MAAAA,OAAO,EAAEC;AAAxC,KAAD,CAAR;AACAxB,IAAAA,MAAM,CAAC4B,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAvB;AACH,GAJD,CAIE,OAAOO,KAAP,EAAc;AACZb,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEhB,kBAAR;AAA4BiB,MAAAA,OAAO,EAAEQ,KAAK,CAACC;AAA3C,KAAD,CAAR;AACH;AACJ,CATD;;AAWA,MAAMS,MAAM,GAAG,MAAOvB,QAAD,IAAc;AAC/BlB,EAAAA,MAAM,CAAC0C,MAAP,CAAc,UAAd;AACAxB,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEf;AAAR,GAAD,CAAR;AACH,CAHD;;AAIA,SAAS0B,MAAT,EAAiBO,QAAjB,EAA2BC,MAA3B,EAAmC5B,MAAnC","sourcesContent":["import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport {\n    USER_SIGNIN_REQUEST,\n    USER_SIGNIN_SUCCESS,\n    USER_SIGNIN_FAIL,\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n    USER_LOGOUT,\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL\n} from \"../constants/userConstants\";\n\nvar axiosConfig = {\n    headers: {\n        'Content-Type': 'application/json;charset=UTF-8',\n        \"Access-Control-Allow-Origin\": \"*\",\n    }\n};\n\nconst update = ({ userId, name, email, password }) => async(dispatch, getState) => {\n    const { userSignin: { userInfo } } = getState();\n    dispatch({ type: USER_UPDATE_REQUEST, payload: { userId, name, email, password } });\n    try {\n        const { data } = await Axios.put(\"/api/users/\" + userId, { name, email, password }, {\n            headers: {\n                Authorization: 'Bearer ' + userInfo.token\n            }\n        });\n        dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\n        Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error) {\n        dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\n    }\n}\n\nconst signin = (email, password) => async(dispatch) => {\n\n    axios.post(\"api/users/login\", { email,password})\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      })\n    // dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\n    // try {\n    //     const { data } = await Axios.post(\"/api/users/login\",{email,password},axiosConfig);\n    //     dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n    //     Cookie.set('userInfo', JSON.stringify(data));\n    // } catch (error) {\n    //     dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\n    // }\n}\n\nconst register = (name, email, password) => async(dispatch) => {\n    dispatch({ type: USER_REGISTER_REQUEST, payload: { name, email, password } });\n    try {\n        const { data } = await Axios.post(\"/api/users/register\", { name, email, password });\n        dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\n        Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error) {\n        dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\n    }\n}\n\nconst logout = () => (dispatch) => {\n    Cookie.remove(\"userInfo\");\n    dispatch({ type: USER_LOGOUT })\n}\nexport { signin, register, logout, update };"]},"metadata":{},"sourceType":"module"}