{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGOUT, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, USER_LIST_FAIL, USER_LIST_SUCCESS, USER_LIST_REQUEST } from \"../constants/userConstants\";\nconst base_url = 'https://questionbytebackend.herokuapp.com/api/users/';\n\nconst update = (id, name, email, gender, role, about, department, college, dob, github, linkedIn, contactNo) => async dispatch => {\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      id,\n      name,\n      email,\n      gender,\n      role,\n      about,\n      department,\n      college,\n      dob,\n      github,\n      linkedIn,\n      contactNo\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(base_url + \"updateuser\", {\n      id,\n      name,\n      email,\n      gender,\n      role,\n      about,\n      department,\n      college,\n      dob,\n      github,\n      linkedIn,\n      contactNo\n    });\n\n    if (data.status === 'success') {\n      dispatch({\n        type: USER_UPDATE_SUCCESS,\n        payload: data.data\n      });\n      Cookie.set('userInfo', JSON.stringify(data.data));\n    } else {\n      dispatch({\n        type: USER_UPDATE_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"https://questionbytebackend.herokuapp.com/api/users/login\", {\n      email,\n      password\n    });\n\n    if (data.status === 'success') {\n      dispatch({\n        type: USER_SIGNIN_SUCCESS,\n        payload: data.data\n      });\n      Cookie.set('userInfo', JSON.stringify(data.data));\n    } else {\n      dispatch({\n        type: USER_SIGNIN_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst getUser = userId => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: userId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(base_url + \"/getuser/?\" + userId);\n\n    if (data.status === 'success') {\n      dispatch({\n        type: USER_SIGNIN_SUCCESS,\n        payload: data.data\n      });\n    } else {\n      dispatch({\n        type: USER_SIGNIN_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst getAllUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      data\n    } = await Axios.get(base_url + 'allusers');\n\n    if (data.status === 'success') {\n      dispatch({\n        type: USER_LIST_SUCCESS,\n        payload: data.data\n      });\n    } else {\n      dispatch({\n        type: USER_LIST_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (userName, email, gender, role, password, passwordConfirm) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      userName,\n      email,\n      gender,\n      role,\n      password,\n      passwordConfirm\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"https://questionbytebackend.herokuapp.com/api/users/signup\", {\n      userName,\n      email,\n      gender,\n      role,\n      password,\n      passwordConfirm\n    });\n\n    if (data.status === 'success') {\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data\n      }); //Cookie.set('userInfo', JSON.stringify(data.data));\n    } else {\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nconst getAllTags = () => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      data\n    } = await Axios.get(base_url + 'alltags');\n\n    if (data.status === 'success') {\n      dispatch({\n        type: USER_LIST_SUCCESS,\n        payload: data.data\n      });\n    } else {\n      dispatch({\n        type: USER_LIST_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { signin, register, logout, update, getUser, getAllUsers, getAllTags }; // Axios.post(\"/api/users/login\", { email,password})\n//   .then(res => {\n//     console.log(res);\n//     console.log(res.data);\n//   })\n//   .catch(err => {\n//     console.log(err);\n//   });","map":{"version":3,"sources":["/home/radhetians/Desktop/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGOUT","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_LIST_FAIL","USER_LIST_SUCCESS","USER_LIST_REQUEST","base_url","update","id","name","email","gender","role","about","department","college","dob","github","linkedIn","contactNo","dispatch","type","payload","data","put","status","set","JSON","stringify","message","error","signin","password","post","getUser","userId","get","getAllUsers","register","userName","passwordConfirm","logout","remove","getAllTags"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport {\n    USER_SIGNIN_REQUEST,\n    USER_SIGNIN_SUCCESS,\n    USER_SIGNIN_FAIL,\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n    USER_LOGOUT,\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n    USER_LIST_FAIL,\n    USER_LIST_SUCCESS,\n    USER_LIST_REQUEST\n} from \"../constants/userConstants\";\n\nconst base_url = 'https://questionbytebackend.herokuapp.com/api/users/';\n\nconst update = ( id, name, email, gender, role, about, department, college, dob, github, linkedIn, contactNo) => async(dispatch) => {\n    \n    dispatch({ type: USER_UPDATE_REQUEST, payload: { id, name, email, gender, role, about, department, college, dob, github, linkedIn, contactNo } });\n    try {\n        const { data } = await Axios.put( base_url + \"updateuser\", { id, name, email, gender, role, about, department, college, dob, github, linkedIn, contactNo });\n        if(data.status==='success'){\n            dispatch({ type: USER_UPDATE_SUCCESS, payload: data.data });\n            Cookie.set('userInfo', JSON.stringify(data.data));\n        } else {\n            dispatch({ type: USER_UPDATE_FAIL, payload: data.message });\n        }\n    } catch (error) {\n        dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\n    }\n}\n\nconst signin = (email, password) => async(dispatch) => {\n\n    dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\n    try {\n        const { data } = await Axios.post(\"https://questionbytebackend.herokuapp.com/api/users/login\",{email,password});\n        if(data.status==='success'){\n            dispatch({ type: USER_SIGNIN_SUCCESS, payload: data.data });\n            Cookie.set('userInfo', JSON.stringify(data.data));\n        } else {\n            dispatch({ type: USER_SIGNIN_FAIL, payload: data.message });\n        }\n        \n    } catch (error) {\n        dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\n    }\n}\n\nconst getUser = (userId) => async(dispatch) => {\n\n    dispatch({ type: USER_SIGNIN_REQUEST, payload: userId });\n    try {\n        const { data } = await Axios.get(base_url + \"/getuser/?\" + userId);\n        if(data.status==='success'){\n            dispatch({ type: USER_SIGNIN_SUCCESS, payload: data.data });\n        } else {\n            dispatch({ type: USER_SIGNIN_FAIL, payload: data.message });\n        }\n        \n    } catch (error) {\n        dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\n    }\n}\n\nconst getAllUsers = () => async(dispatch) => {\n    try {\n        dispatch({ type: USER_LIST_REQUEST });\n        const { data } = await Axios.get(base_url + 'allusers' );\n        if(data.status==='success'){\n          dispatch({ type: USER_LIST_SUCCESS, payload: data.data });\n        } else {\n          dispatch({ type: USER_LIST_FAIL, payload: data.message });\n        }\n        \n    } catch (error) {\n        dispatch({ type: USER_LIST_FAIL, payload: error.message });\n    }\n}\n\n\nconst register = (userName, email, gender, role, password, passwordConfirm) => async(dispatch) => {\n    dispatch({ type: USER_REGISTER_REQUEST, payload: { userName, email, gender, role, password, passwordConfirm} });\n    try {\n        const { data } = await Axios.post(\"https://questionbytebackend.herokuapp.com/api/users/signup\", { userName, email, gender, role, password, passwordConfirm});\n        if(data.status==='success'){\n            dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\n            //Cookie.set('userInfo', JSON.stringify(data.data));\n        } else {\n            dispatch({ type: USER_REGISTER_FAIL, payload: data.message });\n        }\n        \n    } catch (error) {\n        dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\n    }\n}\n\nconst logout = () => (dispatch) => {\n    Cookie.remove(\"userInfo\");\n    dispatch({ type: USER_LOGOUT })\n}\n\nconst getAllTags = () => async(dispatch) => {\n    try {\n        dispatch({ type: USER_LIST_REQUEST });\n        const { data } = await Axios.get(base_url + 'alltags' );\n        if(data.status==='success'){\n          dispatch({ type: USER_LIST_SUCCESS, payload: data.data });\n        } else {\n          dispatch({ type: USER_LIST_FAIL, payload: data.message });\n        }\n        \n    } catch (error) {\n        dispatch({ type: USER_LIST_FAIL, payload: error.message });\n    }\n}\n\nexport { \n    signin,\n    register,\n    logout,\n    update,\n    getUser,\n    getAllUsers,\n    getAllTags\n };\n\n\n// Axios.post(\"/api/users/login\", { email,password})\n    //   .then(res => {\n    //     console.log(res);\n    //     console.log(res.data);\n    //   })\n    //   .catch(err => {\n    //     console.log(err);\n    //   });\n"]},"metadata":{},"sourceType":"module"}