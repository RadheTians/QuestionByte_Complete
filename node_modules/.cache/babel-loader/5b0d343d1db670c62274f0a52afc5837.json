{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboard\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport PastePlainText from './pasteplaintext';\nimport ClipboardObserver from './clipboardobserver';\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\nimport EventInfo from '@ckeditor/ckeditor5-utils/src/eventinfo';\n/**\n * The clipboard feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through the clipboard pipeline in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with serialized editor's data.\n *\n * Read more about the clipboard integration in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive} guide.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Clipboard extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Clipboard';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [PastePlainText];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const modelDocument = editor.model.document;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    view.addObserver(ClipboardObserver); // The clipboard paste pipeline.\n    // Pasting and dropping is disabled when editor is read-only.\n    // See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\n    this.listenTo(viewDocument, 'clipboardInput', evt => {\n      if (editor.isReadOnly) {\n        evt.stop();\n      }\n    }, {\n      priority: 'highest'\n    });\n    this.listenTo(viewDocument, 'clipboardInput', (evt, data) => {\n      const dataTransfer = data.dataTransfer;\n      let content = '';\n\n      if (dataTransfer.getData('text/html')) {\n        content = normalizeClipboardHtml(dataTransfer.getData('text/html'));\n      } else if (dataTransfer.getData('text/plain')) {\n        content = plainTextToHtml(dataTransfer.getData('text/plain'));\n      }\n\n      content = this.editor.data.htmlProcessor.toView(content);\n      const eventInfo = new EventInfo(this, 'inputTransformation');\n      this.fire(eventInfo, {\n        content,\n        dataTransfer,\n        asPlainText: data.asPlainText\n      }); // If CKEditor handled the input, do not bubble the original event any further.\n      // This helps external integrations recognize that fact and act accordingly.\n      // https://github.com/ckeditor/ckeditor5-upload/issues/92\n\n      if (eventInfo.stop.called) {\n        evt.stop();\n      }\n\n      view.scrollToTheSelection();\n    }, {\n      priority: 'low'\n    });\n    this.listenTo(this, 'inputTransformation', (evt, data) => {\n      if (!data.content.isEmpty) {\n        const dataController = this.editor.data;\n        const model = this.editor.model; // Convert the pasted content to a model document fragment.\n        // The conversion is contextual, but in this case we need an \"all allowed\" context\n        // and for that we use the $clipboardHolder item.\n\n        const modelFragment = dataController.toModel(data.content, '$clipboardHolder');\n\n        if (modelFragment.childCount == 0) {\n          return;\n        }\n\n        model.change(writer => {\n          const selection = model.document.selection; // Plain text can be determined based on event flag (#7799) or auto-detection (#1006). If detected,\n          // preserve selection attributes on pasted items.\n\n          if (data.asPlainText || isPlainTextFragment(modelFragment, model.schema)) {\n            // Formatting attributes should be preserved.\n            const textAttributes = Array.from(selection.getAttributes()).filter(([key]) => model.schema.getAttributeProperties(key).isFormatting);\n\n            if (!selection.isCollapsed) {\n              model.deleteContent(selection, {\n                doNotAutoparagraph: true\n              });\n            } // Also preserve other attributes if they survived the content deletion (because they were not fully selected).\n            // For example linkHref is not a formatting attribute but it should be preserved if pasted text was in the middle\n            // of a link.\n\n\n            textAttributes.push(...selection.getAttributes());\n            const range = writer.createRangeIn(modelFragment);\n\n            for (const item of range.getItems()) {\n              if (item.is('$text') || item.is('$textProxy')) {\n                writer.setAttributes(textAttributes, item);\n              }\n            }\n          }\n\n          model.insertContent(modelFragment);\n        });\n        evt.stop();\n      }\n    }, {\n      priority: 'low'\n    }); // The clipboard copy/cut pipeline.\n\n    function onCopyCut(evt, data) {\n      const dataTransfer = data.dataTransfer;\n      data.preventDefault();\n      const content = editor.data.toView(editor.model.getSelectedContent(modelDocument.selection));\n      viewDocument.fire('clipboardOutput', {\n        dataTransfer,\n        content,\n        method: evt.name\n      });\n    }\n\n    this.listenTo(viewDocument, 'copy', onCopyCut, {\n      priority: 'low'\n    });\n    this.listenTo(viewDocument, 'cut', (evt, data) => {\n      // Cutting is disabled when editor is read-only.\n      // See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n      if (editor.isReadOnly) {\n        data.preventDefault();\n      } else {\n        onCopyCut(evt, data);\n      }\n    }, {\n      priority: 'low'\n    });\n    this.listenTo(viewDocument, 'clipboardOutput', (evt, data) => {\n      if (!data.content.isEmpty) {\n        data.dataTransfer.setData('text/html', this.editor.data.htmlProcessor.toData(data.content));\n        data.dataTransfer.setData('text/plain', viewToPlainText(data.content));\n      }\n\n      if (data.method == 'cut') {\n        editor.model.deleteContent(modelDocument.selection);\n      }\n    }, {\n      priority: 'low'\n    });\n  }\n\n}\n/**\n * Fired with a `content` and `dataTransfer` objects. The `content` which comes from the clipboard (was pasted or dropped)\n * should be processed in order to be inserted into the editor. The `dataTransfer` object is available\n * in case the transformation functions need access to raw clipboard data.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\n * @param {Object} data Event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\n * It can be modified by the event listeners. Read more about the clipboard pipelines in\n * {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n * @param {Boolean} data.asPlainText If set to `true`, the content is pasted as plain text.\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline \"clipboard output pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboard~ClipboardOutputEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by a copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\n */\n// Returns true if specified `documentFragment` represents a plain text.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\nfunction isPlainTextFragment(documentFragment, schema) {\n  if (documentFragment.childCount > 1) {\n    return false;\n  }\n\n  const child = documentFragment.getChild(0);\n\n  if (schema.isObject(child)) {\n    return false;\n  }\n\n  return [...child.getAttributeKeys()].length == 0;\n}","map":{"version":3,"sources":["/home/radhetians/Desktop/frontend/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboard.js"],"names":["Plugin","PastePlainText","ClipboardObserver","plainTextToHtml","normalizeClipboardHtml","viewToPlainText","EventInfo","Clipboard","pluginName","requires","init","editor","modelDocument","model","document","view","editing","viewDocument","addObserver","listenTo","evt","isReadOnly","stop","priority","data","dataTransfer","content","getData","htmlProcessor","toView","eventInfo","fire","asPlainText","called","scrollToTheSelection","isEmpty","dataController","modelFragment","toModel","childCount","change","writer","selection","isPlainTextFragment","schema","textAttributes","Array","from","getAttributes","filter","key","getAttributeProperties","isFormatting","isCollapsed","deleteContent","doNotAutoparagraph","push","range","createRangeIn","item","getItems","is","setAttributes","insertContent","onCopyCut","preventDefault","getSelectedContent","method","name","setData","toData","documentFragment","child","getChild","isObject","getAttributeKeys","length"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboard\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport PastePlainText from './pasteplaintext';\n\nimport ClipboardObserver from './clipboardobserver';\n\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\n\nimport EventInfo from '@ckeditor/ckeditor5-utils/src/eventinfo';\n\n/**\n * The clipboard feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through the clipboard pipeline in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with serialized editor's data.\n *\n * Read more about the clipboard integration in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive} guide.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Clipboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Clipboard';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ PastePlainText ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\t// The clipboard paste pipeline.\n\n\t\t// Pasting and dropping is disabled when editor is read-only.\n\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\tthis.listenTo( viewDocument, 'clipboardInput', evt => {\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\t\t\tlet content = '';\n\n\t\t\tif ( dataTransfer.getData( 'text/html' ) ) {\n\t\t\t\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\n\t\t\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\n\t\t\t\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\n\t\t\t}\n\n\t\t\tcontent = this.editor.data.htmlProcessor.toView( content );\n\n\t\t\tconst eventInfo = new EventInfo( this, 'inputTransformation' );\n\t\t\tthis.fire( eventInfo, {\n\t\t\t\tcontent,\n\t\t\t\tdataTransfer,\n\t\t\t\tasPlainText: data.asPlainText\n\t\t\t} );\n\n\t\t\t// If CKEditor handled the input, do not bubble the original event any further.\n\t\t\t// This helps external integrations recognize that fact and act accordingly.\n\t\t\t// https://github.com/ckeditor/ckeditor5-upload/issues/92\n\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tconst dataController = this.editor.data;\n\t\t\t\tconst model = this.editor.model;\n\n\t\t\t\t// Convert the pasted content to a model document fragment.\n\t\t\t\t// The conversion is contextual, but in this case we need an \"all allowed\" context\n\t\t\t\t// and for that we use the $clipboardHolder item.\n\t\t\t\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\n\n\t\t\t\tif ( modelFragment.childCount == 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\tconst selection = model.document.selection;\n\n\t\t\t\t\t// Plain text can be determined based on event flag (#7799) or auto-detection (#1006). If detected,\n\t\t\t\t\t// preserve selection attributes on pasted items.\n\t\t\t\t\tif ( data.asPlainText || isPlainTextFragment( modelFragment, model.schema ) ) {\n\t\t\t\t\t\t// Formatting attributes should be preserved.\n\t\t\t\t\t\tconst textAttributes = Array.from( selection.getAttributes() )\n\t\t\t\t\t\t\t.filter( ( [ key ] ) => model.schema.getAttributeProperties( key ).isFormatting );\n\n\t\t\t\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\t\t\t\tmodel.deleteContent( selection, { doNotAutoparagraph: true } );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Also preserve other attributes if they survived the content deletion (because they were not fully selected).\n\t\t\t\t\t\t// For example linkHref is not a formatting attribute but it should be preserved if pasted text was in the middle\n\t\t\t\t\t\t// of a link.\n\t\t\t\t\t\ttextAttributes.push( ...selection.getAttributes() );\n\n\t\t\t\t\t\tconst range = writer.createRangeIn( modelFragment );\n\n\t\t\t\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\t\t\t\tif ( item.is( '$text' ) || item.is( '$textProxy' ) ) {\n\t\t\t\t\t\t\t\twriter.setAttributes( textAttributes, item );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.insertContent( modelFragment );\n\t\t\t\t} );\n\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// The clipboard copy/cut pipeline.\n\n\t\tfunction onCopyCut( evt, data ) {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\n\t\t\tdata.preventDefault();\n\n\t\t\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\n\n\t\t\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\n\t\t}\n\n\t\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\n\t\t\t// Cutting is disabled when editor is read-only.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t} else {\n\t\t\t\tonCopyCut( evt, data );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tdata.dataTransfer.setData( 'text/html', this.editor.data.htmlProcessor.toData( data.content ) );\n\t\t\t\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\n\t\t\t}\n\n\t\t\tif ( data.method == 'cut' ) {\n\t\t\t\teditor.model.deleteContent( modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Fired with a `content` and `dataTransfer` objects. The `content` which comes from the clipboard (was pasted or dropped)\n * should be processed in order to be inserted into the editor. The `dataTransfer` object is available\n * in case the transformation functions need access to raw clipboard data.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\n * @param {Object} data Event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\n * It can be modified by the event listeners. Read more about the clipboard pipelines in\n * {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n * @param {Boolean} data.asPlainText If set to `true`, the content is pasted as plain text.\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline \"clipboard output pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboard~ClipboardOutputEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by a copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\n */\n\n// Returns true if specified `documentFragment` represents a plain text.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isPlainTextFragment( documentFragment, schema ) {\n\tif ( documentFragment.childCount > 1 ) {\n\t\treturn false;\n\t}\n\n\tconst child = documentFragment.getChild( 0 );\n\n\tif ( schema.isObject( child ) ) {\n\t\treturn false;\n\t}\n\n\treturn [ ...child.getAttributeKeys() ].length == 0;\n}\n"]},"metadata":{},"sourceType":"module"}