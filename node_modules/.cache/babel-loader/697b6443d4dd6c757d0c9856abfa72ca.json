{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGOUT, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from \"../constants/userConstants\";\n\nconst update = ({\n  userId,\n  name,\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/users/\" + userId, {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/login\", {\n      email,\n      password\n    });\n\n    if (data.status === 'success') {\n      dispatch({\n        type: USER_SIGNIN_SUCCESS,\n        payload: data\n      });\n      console.log(data.data);\n      Cookie.set('userInfo', JSON.stringify(data.data));\n    } else {\n      dispatch({\n        type: USER_SIGNIN_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (userName, email, password, passwordConfirm) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      userName,\n      email,\n      password,\n      passwordConfirm\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/signup\", {\n      userName,\n      email,\n      password,\n      passwordConfirm\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { signin, register, logout, update }; // Axios.post(\"/api/users/login\", { email,password})\n//   .then(res => {\n//     console.log(res);\n//     console.log(res.data);\n//   })\n//   .catch(err => {\n//     console.log(err);\n//   });","map":{"version":3,"sources":["/home/radhetians/QuestionByte/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGOUT","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","update","userId","name","email","password","dispatch","getState","userSignin","userInfo","type","payload","data","put","headers","Authorization","token","set","JSON","stringify","error","message","signin","post","status","console","log","register","userName","passwordConfirm","logout","remove"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,gBAHJ,EAIIC,qBAJJ,EAKIC,qBALJ,EAMIC,kBANJ,EAOIC,WAPJ,EAQIC,mBARJ,EASIC,mBATJ,EAUIC,gBAVJ,QAWO,4BAXP;;AAcA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA,KAAhB;AAAuBC,EAAAA;AAAvB,CAAD,KAAuC,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AAC/E,QAAM;AAAEC,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AAAd,MAA+BF,QAAQ,EAA7C;AACAD,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEZ,mBAAR;AAA6Ba,IAAAA,OAAO,EAAE;AAAET,MAAAA,MAAF;AAAUC,MAAAA,IAAV;AAAgBC,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB;AAAtC,GAAD,CAAR;;AACA,MAAI;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMvB,KAAK,CAACwB,GAAN,CAAU,gBAAgBX,MAA1B,EAAkC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAlC,EAA6D;AAChFS,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,YAAYN,QAAQ,CAACO;AAD/B;AADuE,KAA7D,CAAvB;AAKAV,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEX,mBAAR;AAA6BY,MAAAA,OAAO,EAAEC;AAAtC,KAAD,CAAR;AACAtB,IAAAA,MAAM,CAAC2B,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAvB;AACH,GARD,CAQE,OAAOQ,KAAP,EAAc;AACZd,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEV,gBAAR;AAA0BW,MAAAA,OAAO,EAAES,KAAK,CAACC;AAAzC,KAAD,CAAR;AACH;AACJ,CAdD;;AAgBA,MAAMC,MAAM,GAAG,CAAClB,KAAD,EAAQC,QAAR,KAAqB,MAAMC,QAAN,IAAmB;AAEnDA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEnB,mBAAR;AAA6BoB,IAAAA,OAAO,EAAE;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAtC,GAAD,CAAR;;AACA,MAAI;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMvB,KAAK,CAACkC,IAAN,CAAW,kBAAX,EAA8B;AAACnB,MAAAA,KAAD;AAAOC,MAAAA;AAAP,KAA9B,CAAvB;;AACA,QAAGO,IAAI,CAACY,MAAL,KAAc,SAAjB,EAA2B;AACvBlB,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAElB,mBAAR;AAA6BmB,QAAAA,OAAO,EAAEC;AAAtC,OAAD,CAAR;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAYd,IAAI,CAACA,IAAjB;AACAtB,MAAAA,MAAM,CAAC2B,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeP,IAAI,CAACA,IAApB,CAAvB;AACH,KAJD,MAIO;AACHN,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEjB,gBAAR;AAA0BkB,QAAAA,OAAO,EAAEC,IAAI,CAACS;AAAxC,OAAD,CAAR;AACH;AAEJ,GAVD,CAUE,OAAOD,KAAP,EAAc;AACZd,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEjB,gBAAR;AAA0BkB,MAAAA,OAAO,EAAES,KAAK,CAACC;AAAzC,KAAD,CAAR;AACH;AACJ,CAhBD;;AAkBA,MAAMM,QAAQ,GAAG,CAACC,QAAD,EAAWxB,KAAX,EAAkBC,QAAlB,EAA2BwB,eAA3B,KAA+C,MAAMvB,QAAN,IAAmB;AAC/EA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEhB,qBAAR;AAA+BiB,IAAAA,OAAO,EAAE;AAAEiB,MAAAA,QAAF;AAAYxB,MAAAA,KAAZ;AAAmBC,MAAAA,QAAnB;AAA6BwB,MAAAA;AAA7B;AAAxC,GAAD,CAAR;;AACA,MAAI;AACA,UAAM;AAAEjB,MAAAA;AAAF,QAAW,MAAMvB,KAAK,CAACkC,IAAN,CAAW,mBAAX,EAAgC;AAAEK,MAAAA,QAAF;AAAYxB,MAAAA,KAAZ;AAAmBC,MAAAA,QAAnB;AAA6BwB,MAAAA;AAA7B,KAAhC,CAAvB;AACAvB,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEf,qBAAR;AAA+BgB,MAAAA,OAAO,EAAEC;AAAxC,KAAD,CAAR;AACAtB,IAAAA,MAAM,CAAC2B,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAvB;AACH,GAJD,CAIE,OAAOQ,KAAP,EAAc;AACZd,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEd,kBAAR;AAA4Be,MAAAA,OAAO,EAAES,KAAK,CAACC;AAA3C,KAAD,CAAR;AACH;AACJ,CATD;;AAWA,MAAMS,MAAM,GAAG,MAAOxB,QAAD,IAAc;AAC/BhB,EAAAA,MAAM,CAACyC,MAAP,CAAc,UAAd;AACAzB,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEb;AAAR,GAAD,CAAR;AACH,CAHD;;AAIA,SAASyB,MAAT,EAAiBK,QAAjB,EAA2BG,MAA3B,EAAmC7B,MAAnC,G,CAGA;AACI;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport {\n    USER_SIGNIN_REQUEST,\n    USER_SIGNIN_SUCCESS,\n    USER_SIGNIN_FAIL,\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n    USER_LOGOUT,\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL\n} from \"../constants/userConstants\";\n\n\nconst update = ({ userId, name, email, password }) => async(dispatch, getState) => {\n    const { userSignin: { userInfo } } = getState();\n    dispatch({ type: USER_UPDATE_REQUEST, payload: { userId, name, email, password } });\n    try {\n        const { data } = await Axios.put(\"/api/users/\" + userId, { name, email, password }, {\n            headers: {\n                Authorization: 'Bearer ' + userInfo.token\n            }\n        });\n        dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\n        Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error) {\n        dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\n    }\n}\n\nconst signin = (email, password) => async(dispatch) => {\n\n    dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\n    try {\n        const { data } = await Axios.post(\"/api/users/login\",{email,password});\n        if(data.status==='success'){\n            dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n            console.log(data.data)\n            Cookie.set('userInfo', JSON.stringify(data.data));\n        } else {\n            dispatch({ type: USER_SIGNIN_FAIL, payload: data.message });\n        }\n        \n    } catch (error) {\n        dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\n    }\n}\n\nconst register = (userName, email, password,passwordConfirm) => async(dispatch) => {\n    dispatch({ type: USER_REGISTER_REQUEST, payload: { userName, email, password, passwordConfirm} });\n    try {\n        const { data } = await Axios.post(\"/api/users/signup\", { userName, email, password, passwordConfirm});\n        dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\n        Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error) {\n        dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\n    }\n}\n\nconst logout = () => (dispatch) => {\n    Cookie.remove(\"userInfo\");\n    dispatch({ type: USER_LOGOUT })\n}\nexport { signin, register, logout, update };\n\n\n// Axios.post(\"/api/users/login\", { email,password})\n    //   .then(res => {\n    //     console.log(res);\n    //     console.log(res.data);\n    //   })\n    //   .catch(err => {\n    //     console.log(err);\n    //   });\n"]},"metadata":{},"sourceType":"module"}