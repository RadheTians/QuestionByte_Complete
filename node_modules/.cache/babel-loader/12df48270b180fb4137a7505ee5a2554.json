{"ast":null,"code":"import { QUESTION_LIST_REQUEST, QUESTION_LIST_SUCCESS, QUESTION_LIST_FAIL, QUESTION_DETAILS_REQUEST, QUESTION_DETAILS_SUCCESS, QUESTION_DETAILS_FAIL, QUESTION_SAVE_REQUEST, QUESTION_SAVE_SUCCESS, QUESTION_SAVE_FAIL, QUESTION_DELETE_SUCCESS, QUESTION_DELETE_FAIL, QUESTION_DELETE_REQUEST, QUESTION_REVIEW_SAVE_REQUEST, QUESTION_REVIEW_SAVE_FAIL, QUESTION_REVIEW_SAVE_SUCCESS } from '../constants/questionConstants';\nimport axios from 'axios';\nimport Axios from 'axios';\nconst base_url = 'https://questionbytebackend.herokuapp.com/api/users/';\n\nconst listQuestions = () => async dispatch => {\n  try {\n    dispatch({\n      type: QUESTION_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(base_url + 'allquestions');\n\n    if (data.status === 'success') {\n      dispatch({\n        type: QUESTION_LIST_SUCCESS,\n        payload: data.data\n      });\n    } else {\n      dispatch({\n        type: QUESTION_LIST_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: QUESTION_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveQuestion = (askedUserId, askedUserName, title, description, tags) => async dispatch => {\n  dispatch({\n    type: QUESTION_SAVE_REQUEST,\n    payload: {\n      askedUserId,\n      askedUserName,\n      title,\n      description,\n      tags\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(base_url + 'askquestion', {\n      askedUserId,\n      askedUserName,\n      title,\n      description,\n      tags\n    });\n\n    if (data.status === 'success') {\n      dispatch({\n        type: QUESTION_SAVE_SUCCESS,\n        payload: data.data\n      });\n    } else {\n      dispatch({\n        type: QUESTION_SAVE_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: QUESTION_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveAnswer = (questionId, userId, userName, answer) => async dispatch => {\n  dispatch({\n    type: QUESTION_SAVE_REQUEST,\n    payload: {\n      questionId,\n      userId,\n      userName,\n      answer\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(base_url + 'answertoquestion', {\n      questionId,\n      userId,\n      userName,\n      answer\n    });\n\n    if (data.status === 'success') {\n      dispatch({\n        type: QUESTION_SAVE_SUCCESS,\n        payload: data.data\n      });\n    } else {\n      dispatch({\n        type: QUESTION_SAVE_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: QUESTION_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst answersToQuestion = id => async dispatch => {\n  try {\n    dispatch({\n      type: QUESTION_DETAILS_REQUEST,\n      payload: id\n    });\n    const {\n      data\n    } = await axios.get(base_url + 'answersofquestion/?id=' + id);\n\n    if (data.status === 'success') {\n      dispatch({\n        type: QUESTION_DETAILS_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: QUESTION_DETAILS_FAIL,\n        payload: data.message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: QUESTION_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteProdcut = productId => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    dispatch({\n      type: QUESTION_DELETE_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.delete('/api/products/' + productId, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: QUESTION_DELETE_SUCCESS,\n      payload: data,\n      success: true\n    });\n  } catch (error) {\n    dispatch({\n      type: QUESTION_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProductReview = (productId, review) => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo: {\n          token\n        }\n      }\n    } = getState();\n    dispatch({\n      type: QUESTION_REVIEW_SAVE_REQUEST,\n      payload: review\n    });\n    const {\n      data\n    } = await axios.post(`/api/users/${productId}/reviews`, review, {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    dispatch({\n      type: QUESTION_REVIEW_SAVE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    // report error\n    dispatch({\n      type: QUESTION_REVIEW_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listQuestions, saveQuestion, saveAnswer, answersToQuestion, deleteProdcut, saveProductReview };","map":{"version":3,"sources":["/home/radhetians/Desktop/frontend/src/actions/questionActions.js"],"names":["QUESTION_LIST_REQUEST","QUESTION_LIST_SUCCESS","QUESTION_LIST_FAIL","QUESTION_DETAILS_REQUEST","QUESTION_DETAILS_SUCCESS","QUESTION_DETAILS_FAIL","QUESTION_SAVE_REQUEST","QUESTION_SAVE_SUCCESS","QUESTION_SAVE_FAIL","QUESTION_DELETE_SUCCESS","QUESTION_DELETE_FAIL","QUESTION_DELETE_REQUEST","QUESTION_REVIEW_SAVE_REQUEST","QUESTION_REVIEW_SAVE_FAIL","QUESTION_REVIEW_SAVE_SUCCESS","axios","Axios","base_url","listQuestions","dispatch","type","data","get","status","payload","message","error","saveQuestion","askedUserId","askedUserName","title","description","tags","post","saveAnswer","questionId","userId","userName","answer","answersToQuestion","id","deleteProdcut","productId","getState","userSignin","userInfo","delete","headers","Authorization","token","success","saveProductReview","review"],"mappings":"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","sourcesContent":["import {\n    QUESTION_LIST_REQUEST,\n    QUESTION_LIST_SUCCESS,\n    QUESTION_LIST_FAIL,\n    QUESTION_DETAILS_REQUEST,\n    QUESTION_DETAILS_SUCCESS,\n    QUESTION_DETAILS_FAIL,\n    QUESTION_SAVE_REQUEST,\n    QUESTION_SAVE_SUCCESS,\n    QUESTION_SAVE_FAIL,\n    QUESTION_DELETE_SUCCESS,\n    QUESTION_DELETE_FAIL,\n    QUESTION_DELETE_REQUEST,\n    QUESTION_REVIEW_SAVE_REQUEST,\n    QUESTION_REVIEW_SAVE_FAIL,\n    QUESTION_REVIEW_SAVE_SUCCESS,\n  } from '../constants/questionConstants';\n  import axios from 'axios';\n  import Axios from 'axios';\n  \n  const base_url = 'https://questionbytebackend.herokuapp.com/api/users/';\n\n  const listQuestions = () => async (dispatch) => {\n    try {\n      dispatch({ type: QUESTION_LIST_REQUEST });\n      const { data } = await axios.get(base_url + 'allquestions');\n      if(data.status==='success'){\n        dispatch({ type: QUESTION_LIST_SUCCESS, payload: data.data });\n      } else {\n        dispatch({ type: QUESTION_LIST_FAIL, payload: data.message });\n      }\n      \n    } catch (error) {\n      dispatch({ type: QUESTION_LIST_FAIL, payload: error.message });\n    }\n  };\n\n  const saveQuestion = (askedUserId, askedUserName, title, description, tags) => async (dispatch) => {\n    dispatch({ type: QUESTION_SAVE_REQUEST, payload: {askedUserId, askedUserName, title, description, tags} });\n    try {\n      const { data } = await Axios.post( base_url + 'askquestion', {askedUserId, askedUserName, title, description, tags});\n      if(data.status==='success'){\n        dispatch({ type: QUESTION_SAVE_SUCCESS, payload: data.data });\n      }else {\n        dispatch({ type: QUESTION_SAVE_FAIL, payload: data.message });\n      }\n      \n    } catch (error) {\n      dispatch({ type: QUESTION_SAVE_FAIL, payload: error.message });\n    }\n  };\n  \n  const saveAnswer = (questionId, userId, userName, answer) => async (dispatch) => {\n    dispatch({ type: QUESTION_SAVE_REQUEST, payload: {questionId, userId, userName, answer} });\n    try {\n      const { data } = await Axios.post( base_url + 'answertoquestion', {questionId, userId, userName, answer});\n      if(data.status==='success'){\n        dispatch({ type: QUESTION_SAVE_SUCCESS, payload: data.data });\n      }else {\n        dispatch({ type: QUESTION_SAVE_FAIL, payload: data.message });\n      }\n      \n    } catch (error) {\n      dispatch({ type: QUESTION_SAVE_FAIL, payload: error.message });\n    }\n  };\n  \n  const answersToQuestion = (id) => async (dispatch) => {\n    try {\n      dispatch({ type: QUESTION_DETAILS_REQUEST, payload: id });\n      const { data } = await axios.get( base_url + 'answersofquestion/?id=' + id);\n      if(data.status==='success'){\n        dispatch({ type: QUESTION_DETAILS_SUCCESS, payload: data });\n      } else {\n        dispatch({ type: QUESTION_DETAILS_FAIL, payload: data.message });\n      }\n    } catch (error) {\n      dispatch({ type: QUESTION_DETAILS_FAIL, payload: error.message });\n    }\n  };\n  \n  const deleteProdcut = (productId) => async (dispatch, getState) => {\n    try {\n      const {\n        userSignin: { userInfo },\n      } = getState();\n      dispatch({ type: QUESTION_DELETE_REQUEST, payload: productId });\n      const { data } = await axios.delete('/api/products/' + productId, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token,\n        },\n      });\n      dispatch({ type: QUESTION_DELETE_SUCCESS, payload: data, success: true });\n    } catch (error) {\n      dispatch({ type: QUESTION_DELETE_FAIL, payload: error.message });\n    }\n  };\n  \n  const saveProductReview = (productId, review) => async (dispatch, getState) => {\n    try {\n      const {\n        userSignin: {\n          userInfo: { token },\n        },\n      } = getState();\n      dispatch({ type: QUESTION_REVIEW_SAVE_REQUEST, payload: review });\n      const { data } = await axios.post(\n        `/api/users/${productId}/reviews`,\n        review,\n        {\n          headers: {\n            Authorization: 'Bearer ' + token,\n          },\n        }\n      );\n      dispatch({ type: QUESTION_REVIEW_SAVE_SUCCESS, payload: data });\n    } catch (error) {\n      // report error\n      dispatch({ type: QUESTION_REVIEW_SAVE_FAIL, payload: error.message });\n    }\n  };\n  \n  export {\n    listQuestions,\n    saveQuestion,\n    saveAnswer,\n    answersToQuestion,\n    deleteProdcut,\n    saveProductReview,\n  };\n"]},"metadata":{},"sourceType":"module"}